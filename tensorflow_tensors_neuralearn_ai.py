# -*- coding: utf-8 -*-
"""TensorFlow Tensors - Neuralearn.ai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wu4XPWhiIhz4Ew_BDw-poU8yFUPigUf9
"""

import tensorflow as tf
import numpy as np

tf.random.set_seed(5)
print(tf.random.uniform(shape=[3,], maxval=5, dtype=tf.int32, seed=10))
print(tf.random.uniform(shape=[3,], maxval=5, dtype=tf.int32, seed=10))
print(tf.random.uniform(shape=[3,], maxval=5, dtype=tf.int32, seed=10))
print(tf.random.uniform(shape=[3,], maxval=5, dtype=tf.int32, seed=10))

tf.random.set_seed(5)
print(tf.random.uniform(shape=[3,], maxval=5, dtype=tf.int32, seed=10))
print(tf.random.uniform(shape=[3,], maxval=5, dtype=tf.int32, seed=10))
print(tf.random.uniform(shape=[3,], maxval=5, dtype=tf.int32, seed=10))
print(tf.random.uniform(shape=[3,], maxval=5, dtype=tf.int32, seed=10))

tensor_zero_d = tf.constant(4)
print(tensor_zero_d)

tensor_bool = tf.constant([True,True,False])
print(tensor_bool)

tensor_string = tf.constant(["hello world","hi "])
print(tensor_string)

tensor_one_d = tf.constant([2,0.,-3,8,90],dtype=tf.float32)
casted_tensor_one_d = tf.cast(tensor_one_d,dtype=tf.bool)
print(tensor_one_d)
print(casted_tensor_one_d)

tensor_two_d = tf.constant([
    [1,2,0],
    [3,5,-1],
    [1,5,6],
    [2,3,8]
])
print(tensor_two_d)

tensor_three_d = tf.constant([
    [[1,2,0],
    [3,5,-1]],

    [[10,2,0],
    [1,0,2]],

    [[5,8,0],
    [2,7,0]],

    [[2,1,9],
    [4,-3,32]],

])
print(tensor_three_d)

print(tensor_three_d.ndim)

print(tensor_three_d.shape)

t = tf.constant([[1, 1, 1], [2, 2, 2]],)
tf.size(t,out_type=tf.float32)

# shape of tensor 't' is [2, 2, 3]
t = tf.constant([[1, 1, 1], [2, 2, 2]])
tf.rank(t)  # 3

print(tf.shape(tensor_three_d))

tensor_four_d = tf.constant([

[
    [[1,2,0],
    [3,5,-1]],

    [[10,2,0],
    [1,0,2]],

    [[5,8,0],
    [2,7,0]],

    [[2,1,9],
    [4,-3,32]],

],

[
    [[13,26,0],
    [3,5,-12]],

    [[10,2,0],
    [1,0,23]],

    [[5,8,0],
    [2,73,0]],

    [[2,1,9],
    [4,-30,32]],

],

[
    [[103,26,0],
    [3,50,-12]],

    [[100,2,0],
    [1,0,23]],

    [[5,28,0],
    [2,3,0]],

    [[22,1,9],
    [44,-320,32]],

],

])
print(tensor_four_d)

import numpy as np

np_array = np.array([1,2,4])
print(np_array)

converted_tensor = tf.convert_to_tensor(np_array)
print(converted_tensor)

eye_tensor = tf.eye(
    num_rows=5,
    num_columns=None,
    batch_shape=[2,4],
    dtype=tf.dtypes.float32,
    name=None
)
print(eye_tensor)

fill_tensor = tf.fill(
    [1,3,4],5, name=None
)
print(fill_tensor)

zeros_tensor = tf.zeros(
    [3,2],
    dtype=tf.dtypes.float32,
    name=None
)
print(zeros_tensor)

ones_tensor = tf.ones(
    [3,2],
    dtype=tf.dtypes.float32,
    name=None
)
print(ones_tensor)

ones_like_tensor = tf.ones_like(fill_tensor)
print(ones_like_tensor)

random_tensor = tf.random.normal(
    [3,2],
    mean=100.0,
    stddev=1.0,
    dtype=tf.dtypes.float32,
    seed=None,
    name=None
)
print(random_tensor)

random_tensor = tf.random.uniform(
    [5,5],
    minval=0,
    maxval=1000,
    dtype=tf.dtypes.int32,
    seed=None,
    name=None
)
print(random_tensor)

-Tensors are Multi Dimensional Arrays

- An array is an ordered arrangement of numbers







f

import tensorflow as tf
import numpy as np

tensor_zero_d = tf.constant(1)
print(tensor_zero_d)

tensor_one_d = tf.constant([3,0,3], dtype = tf.float32)
print(tensor_one_d)

casted_tensor_one_d = tf.cast(tensor_one_d, dtype = tf.uint16)
print(casted_tensor_one_d)

tensor_two_d = tf.constant([[1,2,0],
                            [3,5,-1],
                            [1,5,6],
                            [2,3,8]])
print(tensor_two_d)

tensor_three_d = tf.constant([[[1,2,0],
                             [3,5,-1]],

                            [[10,2,0],
                             [1,0,2]],

                            [[5,8,0],
                             [2,7,0]],

                            [[2,1,9],
                             [4,-3,32]]])
print(tensor_three_d.ndim)

tensor_four_d = tf.constant([[[[1,2,0],
                             [3,5,-1]],

                            [[10,2,0],
                             [1,0,2]],

                            [[5,8,0],
                             [2,7,0]],

                            [[2,1,9],
                             [4,-3,32]]],



                             [[[0,2,5],
                             [5,3,1]],

                            [[0,2,0],
                             [-1,10,0]],

                            [[0,5,1],
                             [1,7,0]],

                            [[3,8,7],
                             [2,3,2]]],



                             [[[4,5,4],
                             [3,1,1]],

                            [[0,2,5],
                             [0,4,3]],

                            [[3,2,4],
                             [5,8,3]],

                            [[8,2,5],
                             [2,3,3]]]])
print(tensor_four_d)

x = tf.constant(1, shape= (4,4))
print(x)

x_np = np.array([3,4,5])
print(x_np)

x_tf = tf.convert_to_tensor(x_np, dtype = tf.float16)
print(x_tf)

identity_matrix = tf.eye(4, batch_shape=[2], dtype=tf.dtypes.float32, name=None)
print(identity_matrix)

filled_tensor = tf.fill([4,3], 1., )
print(filled_tensor)

ones_tensor = tf.ones([4,3], dtype = tf.float32)
print(ones_tensor)

zeros_tensor = tf.zeros([4,3], dtype = tf.float32)
print(zeros_tensor)

ones_like_tensor = tf.ones_like(tensor_four_d)
print(ones_like_tensor)
print(tensor_four_d.shape)

normal_tensor = tf.random_normal_initializer(
    mean=0.0, stddev=0.05, seed=None
)

print(normal_tensor)

range_tensor = tf.range(start = 2, limit = 10, delta = 3)
print(range_tensor)



print(tf.shape(tensor_three_d,))
print(tensor_three_d.shape)



print(tf.size(tensor_four_d))

g = tf.random.Generator.from_non_deterministic_state()
g.normal(shape=(2,), mean = 100, stddev = 1)

g = tf.random.Generator.from_non_deterministic_state()
g.uniform(shape=(2,), minval = 25, maxval = 40)

tf.random.normal(
    (3,), mean=0.0, stddev=100.0, dtype=tf.dtypes.float32, seed=12, name="Random Number with Normal distribution"
)

tf.random.uniform(
    (2,), minval=0, maxval=100, dtype=tf.dtypes.float32, seed=None, name=None
)

tensor_indexed = tf.constant([3,6,2,4,6,66,7])
print(tensor_indexed[:])
print(tensor_indexed[0:4])
print(tensor_indexed[3:-3])

tensor_two_d = tf.constant([[1,2,0],
                            [3,5,-1],
                            [1,5,6],
                            [2,3,8]])
print(tensor_two_d[...,1])

tensor_three_d = tf.constant([


                              [[1,2,0],
                               [3,5,-1]],

                              [[10,2,0],
                               [1,0,2]],

                              [[5,8,0],
                               [2,7,0]],

                              [[2,1,9],
                               [4,-3,32]]


                              ])

print(tensor_three_d[ ... , : , 2])

print(tf.expand_dims(tensor_three_d[ ... , : , 2],-1))

}x_abs = tf.constant([-2.25, 3.25])
tf.abs(x_abs)

tf.abs(tf.constant(-0.2))

x_abs_complex = tf.constant([-2.25 + 4.75j])
tf.abs(x_abs_complex)

tf.sqrt((-2.25)**2 + 4.75**2)

x_1 = tf.constant([[5,3,6,6,4,6]], dtype = tf.float32)
x_2 = tf.constant([[7], [5], [3]], dtype = tf.float32)

print(x_1.shape)
print(x_2.shape)
print(tf.math.multiply(x_1, x_2))

x_argmax = tf.constant([[2, 20, 30, 3, 6],
                        [3, 11, 16, 1, 8],
                        [14, 45, 23, 5, 27]])

print(x_argmax.shape)
print(tf.math.argmin(x_argmax, axis = 1))

x_argmax = tf.constant([200, 120, 130, 3, 6])
print(tf.math.argmax(x_argmax))

x_argmax = tf.constant([200, 120, 130, 300, 6])
print(tf.math.argmax(x_argmax))

x = tf.constant([[2, 2], [3, 3]])
y = tf.constant([[3, 0], [1, 4]])
tf.pow(x, y)

tf.pow(tf.constant(2) ,tf.constant(3))

tensor_two_d = tf.constant([[1,-2,0],
                            [3,5,100],
                            [1,5,6],
                            [2,3,8]], dtype = tf.float16)
print(tensor_two_d.shape)

print(tf.math.reduce_std(tensor_two_d, axis=0, keepdims=True, name=None))

tf.math.top_k(tensor_two_d, k = 2)

x_1 = tf.constant([[1,2,0]])

x_2 = tf.constant([[1,2],
                  [3,5],
                  [4,5]])

x_3 = tf.constant([[1,2,0,2],
                  [3,5,-1,2]])

print(x_1.shape, x_2.shape, x_3.shape, tf.transpose(x_2).shape)
# x_3.T = 4,2
# x_2.T = 2,3
print(tf.transpose(x_3)@tf.transpose(x_2))
tf.linalg.matmul(
    x_3, x_2, transpose_a=True, transpose_b=True, adjoint_a=False, adjoint_b=True,
    a_is_sparse=False, b_is_sparse=False, output_type=None, name=None
)

x_1@x_2

tf.transpose(x_2)

print(x_2)

x_1 =  tf.constant([[[1,2],
                    [3,5]],

                    [[10,0],
                    [1,2]],

                    [[5,0],
                    [2,0]]])

x_2 = tf.constant([[[5,1,4],
                    [34,15,1]],

                    [[1,2,2],
                    [5,3,2]],

                    [[2,2,3],
                    [1,1,1]]])

print(tf.linalg.matmul(x_1, x_2))

x_1 =  tf.constant([[0,0],
                    [0,2]])

x_2 = tf.constant([[1,0,0],
                    [0,0,0]])

print(tf.linalg.matmul(x_1, x_2))

tensor_two_d = tf.constant([[1,-2,0],
                            [3,5,100],
                            [1,5,6],
                            [2,3,8]], dtype = tf.float16)

tensor_out_d = tf.constant([[1,0,0],
                            [0,5,0],
                            [0,0,6],
                            [0,0,0]], dtype = tf.float16)

#### ( m-n <= lower) and ( n-m <= upper)
# m -- rows, n --- columns
tf.linalg.band_part(tensor_two_d, 0, -1)

tensor_two_d_m_n = tf.constant([[0,-1,-2],
                                [1,0,-1],
                                [2,1,0],
                                [3,2,1]], dtype = tf.float16)

tensor_two_d_n_m = tf.constant([[0,1,2],
                                [-1,0,1],
                                [-2,-1,0],
                                [-3,-2,-1]], dtype = tf.float16)

m = 1, n = 2

tensor_two_d = tf.constant([[1,-2,0],
                            [3,5,100],
                            [1,5,6]], dtype = tf.float32)

tensor_two_d_inv = tf.linalg.inv(tensor_two_d)

tensor_two_d@tensor_two_d_inv

s,u,v = tf.linalg.svd(tensor_two_d)
print(s)
print(u)
print(v)

tensor_three_d = tf.constant([[[1,2,0],
                             [3,5,-1]],

                            [[10,2,0],
                             [1,0,2]],

                            [[5,8,0],
                             [2,7,0]],

                            [[2,1,9],
                             [4,-3,32]]])
print(tensor_three_d.shape)
x_exp = tf.expand_dims(tensor_three_d, axis = 3)
print(x_exp.shape)
print(tf.squeeze(x_exp, axis = 3))
print(tf.reshape(x_exp, [4,2,3]))

x = tf.constant([[[2,3,4,5]]])
print(x.shape)
x_expanded = tf.expand_dims(x, axis = 0)
print(x_expanded)

x_squeezed = tf.squeeze(x_expanded, axis = 0)
for i in range(2):
  x_squeezed = tf.squeeze(x_squeezed, axis = 0)

print(x_squeezed)

x_reshape = tf.constant([[3,5,6,6],
                         [4,6,-1,2]])

print(tf.reshape(x_reshape, [-1]))
print(tf.reshape(x_reshape, [8]))

tf.transpose(x_reshape)

t1 = [[1, 2, 3],
      [4, 5, 6],
      [5, 6, 2],
      [1, 2, 1]]

t2 = [[7, 8, 9],
      [10, 11, 12],
      [0, 0, 2],
      [-1, 5, 2]]

print(tf.constant(t1).shape)
print(tf.constant(t2).shape)

tf.concat([t1, t2], axis = 0)

tf.stack([t1,t2], axis = 2)

tf.stack([t1,t2], axis = 0)

tf.concat([tf.expand_dims(t, axis = 0) for t in [t1,t2]], axis = 0)

1,4,3 - 1,4,3 --> 2,4,3

t1 = [[1, 2, 3],
      [4, 5, 6],
      [5, 6, 2],
      [1, 2, 1]]

t2 = [[7, 8, 9],
      [10, 11, 12],
      [0, 0, 2],
      [-1, 5, 2]]

#4,3 - 4,3 --> 2,4,3
#4,3 - 4,3 --> 4,2,3
#4,3 - 4,3 --> 4,3,2

t = tf.constant([[1, 2, 3],
                 [4, 5, 6]])

paddings = tf.constant([[1, 5,],
                        [2, 3]])

tf.pad(t, paddings, "CONSTANT", constant_values = 0)

params = tf.constant(['p0', 'p1', 'p2', 'p3', 'p4', 'p5'])
print(params.shape)
params[1:3+1]

tf.gather(params, [0,5,3], axis = 0)

params = tf.constant([

                      [[0, 1.0, 2.0],
                       [10.0, 11.0, 12.0],
                       [20.0, 21.0, 22.0],
                       [30.0, 31.0, 32.0]],

                      [[3, 1.0,21],
                       [1, 3, 88],
                       [0, 5, 55],
                       [0, 2, 30]]

                      ])
print(params.shape)
tf.gather(params, [2, 0], axis = 1)

params = tf.constant([[3, 1.0,21],
                       [1, 3, 88],
                       [0, 5, 55],
                       [0, 2, 30]])

print(params.shape)
tf.gather(params, [2, 0], axis = 0)



indices = [2,1]

params = [['a', 'b'],
          ['c', 'd'],
          ['e', 'f']]

tf.gather_nd(params, indices)

indices = [[0, 1, 0], [1, 0, 1]]

params = [[['a0', 'b0'],
           ['c0', 'd0']],

          [['a1', 'b1'],
           ['c1', 'd1']]]

tf.gather_nd(params, indices)

indices = [[[0, 1],
            [1, 0]],

            [[0, 0],
             [1, 1]]]

params = [[['a0', 'b0'],
           ['c0', 'd0']],

          [['a1', 'b1'],
           ['c1', 'd1']]]

tf.gather_nd(params, indices)

indices = [[[0, 1],
            [1, 0]],

            [[0, 0],
             [1, 1]]]

params = [[['a0', 'b0'],
           ['c0', 'd0']],

          [['a1', 'b1'],
           ['c1', 'd1']]]


tf.gather_nd(params, indices, batch_dims = 1)

indices = [[0,1],
           [1,0]]

params = [[['a0', 'b0'],
           ['c0', 'd0']],

          [['a1', 'b1'],
           ['c1', 'd1']]]


tf.gather_nd(params, indices, batch_dims = 1)

tensor_two_d = tf.constant([[1,2,0],
                            [3,5,-1],
                            [1,5,6],
                            [2,3,8]])
print(tensor_two_d)

tensor_two_d =[[1,2,0],
               [3,],
               [1,5,6,5,6],
               [2,3]]
tensor_ragged = tf.ragged.constant(tensor_two_d)
print(tensor_ragged)

print(tf.RaggedTensor.from_row_lengths(
    values=[3, 1, 4, 1, 5, 9, 2, 6],
    row_lengths=[4, 0, 3, 1,0]))

tensor_sparse = tf.sparse.SparseTensor(
    indices = [[1,1],[3,4]], values = [11,56], dense_shape = [5,6]
)

print(tensor_sparse)

tf.sparse.to_dense(tensor_sparse)

tensor_string = tf.constant(["hello", "i am ", "a string"])
print(tensor_string)

tf.strings.join(tensor_string, separator="+")

x = tf.constant([1,2])

x_var = tf.Variable(x, name = 'var1')
print(x_var)

x_var.assign_add([5,8])

with tf.device('CPU:0'):
  x_1 = tf.constant([1,3,4])
  x_2 = tf.constant([1])

with tf.device('GPU:0'):
  x_3 = x_1 + x_2

print(x_1, x_1.device)
print(x_2, x_2.device)
print(x_3, x_3.device)



!wget https://github.com/srihari-humbarwadi/datasets/releases/download/v0.1.0/data.zip

!unzip /content/data.zip -d /content/dataset

import tensorflow as tf

input_var = tf.Variable(initial_value=10.)
with tf.GradientTape() as tape:
  result = tf.square(input_var)
gradient = tape.gradient(result, input_var)

print(gradient)

input_const = tf.constant(10.)
with tf.GradientTape() as tape:
  tape.watch(input_const)
  result = tf.square(input_const)
gradient = tape.gradient(result, input_const)

print(gradient)

time = tf.Variable(0.)
with tf.GradientTape() as outer_tape:
  with tf.GradientTape() as inner_tape:
    position = 4.9 * time ** 2
  speed = inner_tape.gradient(position, time)
acceleration = outer_tape.gradient(speed, time)

print(speed)

print(acceleration)

